Applications for the Browser
    Presentation + UI Behavior + State

JavaScript (ES5)
    Data Types
        Number, String, Boolean, Object, Undefined, Function

    Language Contructs
        var, if else, switch case, while, do, for, try catch finally, throw, function

    Apis
        Array, Date, Math, RegEx, timer (setTimeout, clearTimeout, setInterval, clearInterval), Error

    Misc
        loosely typed
        dynamic
        functions are objects
            - functions can be created using function expression
            - functions can have attributes
            - functions can have methods
            - function can be passed as arguments
            - function can be returned as return values
            - functions can be variadic

            - implicit values passed to a function by default
                - this
                    is NOT based on where the function is / who owns the function
                    IS based on how the function is invoked
        
                - arguments
                    array like object
                        arguments[0]
                        arguments[1]
                        length

            Invocation patterns
                - As a method of an object
                    this -> object
                - As a function
                    this -> global (window)
                - Using the 'call' method of the function
                - Using the 'apply' method of the function
                - As an IIFE (Immediately Invoked Function Expression)

            Pure functions
                - functions with NO side effects
                - the invocation of the function can be replaced by the result of the function
                - memoization

Constructor Functions
    Functions that behave like classes
    Invoked using the 'new' keyword
        - this -> a new object
        - this -> returned by default


Prototypal Inheritance

=> http://bit.ly/javascript-training-videos
            


Class Employee
    int id;
    string name;
    decimal salary;


Employee emp = new Employee();
emp.id = 100;
emp.city = 'Bangalore';


Create an object and assign it to a variable called 'spinner'

var spinner = /*.....*/

The spinner object must exhibit the following behaviors
//up(), down()

spinner.up() //=> 1
spinner.up() //=> 2 
spinner.up() //=> 3
spinner.up() //=> 4

spinner.down() //=> 3
spinner.down() //=> 2
spinner.down() //=> 1
spinner.down() //=> 0
spinner.down() //=> -1

NOTE :
    NO HTML, BUTTON, ONCLICK

    There should be NO WAY one can influence the outcome of up() and down() methods

    The following should NOT be possible
    spinner.counter = 10000;
    spinner.up() /=> SHOULD NOT RETURN 10001

    OR

    window.counter = 10000
    spinner.up() /=> SHOULD NOT RETURN 10001

function add(x,y){
    return x + y;
}


ES6 (ESNext, ECMAScript6, ES2015)
================================
1. let
2. const
3. Array destructuring
4. Rest operator (Array)
5. Spread operator (Array)
6. Object destructuring
7. Rest operator (Object)
8. Spread operator (Object)
9. default arguments
10. Arrow functions
11. template strings
12. classes

http://es6-features.org


Assignment
    Array Methods : reduce, map, filter, forEach

Node.js
    JavaScript Runtime
    Single Threaded (Our application will be executed in ONLY ONE thread)
    Single Threaded Event Loop
        (http://bit.ly/node-training-videos)

    REPL
        Read Evaluate Print Loop

    CommonJS module system
        Everything in a .js is considered private
        Any public object should be assigned to module.exports (default value is an object ({}))
        Any public object from other module should be imported using 'require' function
        
    Assignment
        accumulator.js
            add(x)
            subtract(x)
            multiply(x)
            divide(x)
            getResult()

        accumulatorClient.js
            import accumulator
                add(100)
                subtract(50)
                multiply(10)
                divide(2)
                console.log(accumulator.getResult()) => 250



    Package.js
        manifest file containing the metadata information about the application
        scripts
        dependencies

        to create run the command "npm init"

    npm (node package manager)

    npm install chalk
    npm install nodemon
    
React
    Library for building Rich Internet Application (Single Page Applications)
    Presentation + UI Behavior + State

    Model View Synchronization
    Virtual DOM (Rendering Performance)

    Application = composition of components
    Component -> Represents ONE part of the UI encapsulating Presentation + Behavior + State
        -> can be created as a class / function
        

    react.js
        top level object -> React

    react-dom.js
        top level object -> ReactDOM

    babel
        XML -> JS